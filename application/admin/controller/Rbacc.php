<?php
namespace app\admin\controller;
use app\admin\model\rbac\Organize;
use app\common\controller\Backend;
use app\admin\logical\Rbacl;
use app\admin\model\rbac\User;
use app\admin\model\rbac\Role;
use think\exception\ErrorException;
use \Memcached;
use think\Db;
use erp\Tree;
class Rbacc extends Backend
{
    //Rbacl类的实例
    private static $rbaclInstance='';
    //用户实例
    private static $userInstance='';
    //用户权限实例
    private static $userAccessInstance;
    //角色实例
    private static $roleInstance='';
    //组实例
    private static $groupInstance='';
    //组织实例
    private static $organizeInstance='';
    //规则
    private static $ruleInstance;
    //权限
    private static $accessInstance;
    //权限角色实例
    private static $roleAccessInstance;
    //model路径
    private static $modelpath='app\admin\model\rbac\\';
   public function _initialize()
   {
       return parent::_initialize(); // TODO: Change the autogenerated stub
   }
   /*
    @管理员列表入口方法
    @ return view;
   */
   public function index(){
        return $this->view->fetch('index');
   }
    /**
     * 获取指定实例
     * @param $objstr
     * @return Object
     */
    public function getModel($objstr=''){
        if(empty($objstr))
           return false;
        $obj=lcfirst($objstr).'Instance';
        if(empty(self::$obj)){
            $tmpObj = new \ReflectionClass(self::$modelpath.ucfirst($objstr));
            self::$$obj=new $tmpObj->name();
        }
        return self::$$obj;
   }

    /**
     * 获取权限逻辑处理类实例
     * @return Rbacl|string
     */
   public function getRbacl(){
       if(! (self::$rbaclInstance instanceof Rbacl)){
           self::$rbaclInstance = new Rbacl();
       }
       return self::$rbaclInstance;
   }

    /**
     * @param string $modelname1    模型名称
     * @param string $msg   附加信息
     * @param boolean $type 是否返回值，默认否false ---直接exit , true----return true
     * @param array $attach 附加额外数据
     * @return array
     */
    private function saveCommon($modelname='',$msg='',$type=false,$attach=[]){
        // 获取操作方法
        $method=lcfirst($modelname).'Handle';
        //获取保存数据方法
        $save='save'.$modelname;
        $commonData=array_merge(self::getRbacl()->$method(),$attach);
        $result=self::getModel($modelname)->$save($commonData);
        if($type){
            if(empty($result))
                return false;
            putlog($msg.'保存成功');
            return $result;
        }else{
            if(empty($result))
                outputJson('-2','保存失败');
            putlog($msg.'保存成功');
            outputJson('1','保存成功');
        }
    }

       /**公共删除方法
     * @param string $modelname1    模型名称
     * @param string $msg   附加信息
     * @param boolean $type 是否返回值，默认否false ---直接exit , true----return true
     * @return array
     */
    private function deleteCommon($modelname='',$msg='',$type=false,$where=array()){
        //获取保存数据方法
        $modelnameobj=self::getModel($modelname);
        $result=$modelnameobj->deleteInfo($modelnameobj,$where);
        if($type){
            if(empty($result))
                return false;
            putlog($msg.'删除成功');
            return $result;
        }else{
            if(empty($result))
                outputJson('-2','删除失败');
              putlog($msg.'删除成功');
            outputJson('1','删除成功');
        }
    }
    /**
     * 用户列表*******************************************************************************************************************
     */
    public function listUser()
    {
        //搜索条件参数
        $condition=$this->getRbacl()->getCondition('keys/a',true);
        //获取用户信息
        $limit=$this->request->request("limit", 10);
        $page=$this->request->request("page", 1);
        $result=self::getModel('User')->listUser($condition,$limit,$page);
        //处理用户信息
        self::getRbacl()->showUser($result);
    }
    /**
     * 保存用户
     *      1.添加用户
     *      2.修改用户
     * 注意： 判断依据，提交过来的type决定，type=='add'----添加用户  ；  type=='edit'-----修改用户
     */
    public function addUser(){
        if($this->request->isPost()){
            $this->saveCommon('User','添加用户');
        }
        /*获取添加用户的数据*/ 
        $allRole=self::getModel('Role')->listallRole();
        $allGroup=self::getModel('Group')->listallGroup();
        $allOrganize=self::getModel('Organize')->listallOrganize();
        $this->view->assign("allRole", $allRole['data']);
        $this->view->assign("allGroup", $allGroup['data']);
        $this->view->assign("allOrganize", $allOrganize['data']);
        return $this->view->fetch();
    }
    //编辑用户，u_id必须存在
    public function editUser(){
        if($this->request->isPost()){
            $this->saveCommon('User','编辑用户');
        }
        /*获取添加用户的数据*/  
        $condition= $this->getRbacl()->getCondition('u_id');
        $allRole=self::getModel('Role')->listallRole();
        $allGroup=self::getModel('Group')->listallGroup();
        $allOrganize=self::getModel('Organize')->listallOrganize();
        $this->view->assign("allRole", $allRole['data']);
        $this->view->assign("allGroup", $allGroup['data']);
        $this->view->assign("allOrganize", $allOrganize['data']);
        $condition = $this->getRbacl()->getCondition('u_id');
        //加载用户信息
        $data = $this->getModel('User')->listUser($condition);
        $this->view->assign("row", $data['data'][0]);
        return $this->view->fetch();
    }

    /*********************************************************************************************************
     * @角色部分代码
     ***********
     */
    public function listRole(){
        if ($this->request->isPost()){
            //搜索条件参数
            $condition = $this->getRbacl()->getCondition('keys/a',true);
            //获取用户信息
            $limit=$this->request->request("limit", '');
            $page=$this->request->request("page", '');
            $result=self::getModel('Role')->listRole($condition,$limit,$page);
            //处理用户信息
            self::getRbacl()->showRole($result);
        }
        return $this->view->fetch();
    }
    /*************
      @添加角色接口
    *************/
    public function addRole(){
      if ($this->request->isPost()){
          $this->saveCommon('Role','添加角色');
      }
      return $this->view->fetch('rbacc/addrole');
    }
    /*****
    @编辑角色接口
    *****************/
    public function editRole(){
        if($this->request->isAjax())
            $this->saveCommon('Role','编辑角色');

        $condition= $this->getRbacl()->getCondition('r_id');
        $rows=self::getModel('Role')->listRole($condition);
        if(!$rows['data']){
            outputJson('-2','No Results were found');
        }
        $this->view->assign("row", $rows['data'][0]);
        return $this->view->fetch();
    }

    /******************************************************************************************************************
    @添加组织接口
     *************/
    public function addOrganize(){
        if ($this->request->isPost()){
            $this->saveCommon('Organize','添加组织');
        }
        $data['list'] = self::getModel('Organize')->getallOrganize($condition=[]);//获取全部部门
        return $this->view->fetch('rbacc/addorganize',$data);
    }
    /*****
    @ 编辑角色接口
     *****************/
    public function editOrganize(){
        if($this->request->isAjax()){
            $this->saveCommon('Organize','编辑组织');
        }
        $data['list'] = self::getModel('Organize')->getallOrganize($condition=[]);//获取全部部门
        $condition = $this->getRbacl()->getCondition('o_id');
        $rows=self::getModel('Organize')->listOrganize($condition);
        if(!$rows['data']){
            outputJson('-2','No Results were found');
        }
        $data['row'] = $rows['data'][0];
        return $this->view->fetch('rbacc/editorganize',$data);
    }
    /**
     * @组织列表   *****部门组织列表部分代码
     */
    public function listOrganize(){
        if ($this->request->isPost()){
            //搜索条件参数
            $condition=$this->getRbacl()->getCondition('keys/a',true);
            //获取所有的组织部门全部数据
            $result=self::getModel('Organize')->getallOrganize($condition);
            //处理用户信息
            self::getRbacl()->showOrganizeTree($result);
        }
        return $this->view->fetch();
    }


    /**********************************************************************************************************************
     *@用户分组列表
     */
    public function listGroup(){
      if ($this->request->isPost()){  
            //搜索条件参数
            $condition=$this->getRbacl()->getCondition('keys/a',true);
            //分页信息
            $limit=$this->request->request("limit", '10');
            $page=$this->request->request("page", '1');

            //获取用户信息
            $result=self::getModel('Group')->listGroup($condition,$limit,$page);
            $role = self::getModel('Role');
            foreach($result['data'] as $k=>$v){
                $result['data'][$k]['r_name'] = $role->getField($role,['r_id'=>$v['r_id']],'r_name');
            }
            //处理用户信息
            self::getRbacl()->showGroup($result);
      }
      return $this->view->fetch();
    }

      /*************
      @添加用户分组接口
    *************/
    public function addGroup(){
          if($this->request->isPost()){
              $this->saveCommon('Group','保存用户组');
          }
          $data['list'] = self::getModel('Role')->listallRole();
          return $this->view->fetch('rbacc/addgroup',$data);
    }

    /**************
      @ 编辑用户分组接口
    *****************/
    public function editGroup(){
        if($this->request->isAjax()){
            $this->saveCommon('Group','保存用户组');
        }
        $condition = $this->getRbacl()->getCondition('g_id');
        $rows = self::getModel('Group')->listGroup($condition);
        if(!$rows){
            outputJson('-2','No Results were found');
        }
        $data['row'] = $rows['data'][0];
        $data['list'] = self::getModel('Role')->listallRole();
        return $this->view->fetch('rbacc/editgroup',$data);
    }


    /***********************************************************************************************************************
     *@权限列表
     */
    public function listAccess(){
        if ($this->request->isPost()){

            //搜索条件参数
            $condition = $this->getRbacl()->getCondition('keys/a',true);

            //分页信息
            $limit=$this->request->request("limit", '10');
            $page=$this->request->request("page", '1');

            //获取用户信息
            $result=self::getModel('Access')->listAccess($condition,$limit,$page);
            //处理用户信息
            self::getRbacl()->showAccess($result);
        }
        return $this->view->fetch();
    }
    /*************
    @添加权限分组接口
     *************/
    public function addAccess(){
        if ($this->request->isPost()){
            $this->saveCommon('Access','添加规则');
        }
        $data['list'] = self::getModel('Access')->listallAccess();//获取全部规则
        return $this->view->fetch('rbacc/addaccess',$data);
    }
    /*****
    @ 编辑权限分组接口
     *****************/
    public function editAccess(){
        if($this->request->isAjax()){
            $this->saveCommon('Access','编辑规则');
        }

        $condition = $this->getRbacl()->getCondition('a_id');
        $rows=self::getModel('Access')->listAccess($condition);
        if(!$rows){
            outputJson('-2','No Results were found');
        }
        $data['row'] = $rows['data'][0];
        $data['list'] = self::getModel('Access')->listallAccess();//获取全部规则
        return $this->view->fetch('rbacc/editaccess',$data);
    }
    

    /******************************************************************************************** 
>>>>>>> origin/master
     * 角色权限分配
     */
    public function roleAccessSave(){
        if($this->request->post()){
            $method=lcfirst('RoleAccess').'Handle';
            //获取保存数据方法
            $save='save'.'RoleAccess';
            $result=true;
            $commonData=array_merge(self::getRbacl()->$method(),array());
            $result=self::getModel('RoleAccess')->$save($commonData);        
            if($result){
              $this->code=1;
              $this->msg='保存成功';
              $this->outputJson();
            }
            else{
                $this->code=2;
                $this->msg='保存失败';
                $this->outputJson();
            }   
        }
        //根据r_id 清除掉已存在的对应关系，然后重新添加新生成的角色-权限对应关系
        $condition = $this->getRbacl()->getCondition('r_id');
        unset($where);
        $where['r.r_id']=$condition['where']['r_id'];
        $auth=self::getModel('Access')->getRoleAccess($where);
        $allAccess=self::getModel('Access')->listallAccess();
        $data=$this->getRbacl()->getaccessdata($auth,$allAccess['data']);
        $this->view->assign("auth", $data);
        $this->view->assign("r_id", $condition['where']['r_id']);
        return $this->view->fetch();
    }


    /******************************************************************************************** 
     * 用户权限分配
     */
    public function userAccessSave(){
        if($this->request->post()){
            $method=lcfirst('UserAccess').'Handle';
            //获取保存数据方法
            $save='save'.'UserAccess';
            $result=true;
            $commonData=array_merge(self::getRbacl()->$method(),array());
            $where['u_id']=$commonData['u_id'];
            $result=self::getModel('UserAccess')->$save($commonData['tree']);
            if($result){
              $this->code=1;
              $this->msg='保存成功';
              $this->outputJson();
            }
            else{
                $this->code=2;
                $this->msg='保存失败';
                $this->outputJson();
            }   
        }
        //根据r_id 清除掉已存在的对应关系，然后重新添加新生成的角色-权限对应关系
        $condition = $this->getRbacl()->getCondition('u_id');
        unset($where);
        $where['u.u_id']=$condition['where']['u_id'];
        $auth=self::getModel('Access')->getAccess($where,3);
        $allAccess=self::getModel('Access')->listallAccess();
        $data=$this->getRbacl()->getaccessdata($auth,$allAccess['data']);
        $this->view->assign("auth", $data);
        $this->view->assign("u_id", $condition['where']['u_id']);
        return $this->view->fetch();
    }
    /*删除规则************************************************************
    同步需要删除对应的用户权限表、用户权限表
    */
    public  function delAccess(){
      $condition = $this->getRbacl()->getCondition('a_id');
      // 启动事务
      Db::startTrans();
      $result=true;
      try{
          $result=$this->deleteCommon('Access','规则',true,$condition['where'])&&$result;
          $result=$this->deleteCommon('RoleAccess','角色规则',true,$condition['where'])&&$result;
          $result=$this->deleteCommon('UserAccess','用户规则',true,$condition['where'])&&$result;
          // 提交事务
         Db::commit();    
      } catch (\Exception $e) {
          // 回滚事务
          Db::rollback();
          $result=false;
      }
      if($result){
        $this->code=1;
        $this->msg='保存成功';
        $this->outputJson();
      }
      else{
          $this->code=2;
          $this->msg='保存失败';
          $this->outputJson();
      }

    }
}
